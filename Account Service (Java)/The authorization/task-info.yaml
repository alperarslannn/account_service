type: edu
files:
  - name: src/account/AccountServiceApplication.java
    visible: true
    text: |
      package account;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AccountServiceApplication {
      
          public static void main(String[] args) {
              SpringApplication.run(AccountServiceApplication.class, args);
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/AccountServiceTest.java
    visible: false
    text: |-
      import account.AccountServiceApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import com.google.gson.JsonParser;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.springframework.http.HttpStatus;
      
      import java.util.*;
      import java.util.stream.Collectors;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestReq {
      
        private Map<String, Object> properties = new LinkedHashMap<>();
      
        // Deep copy
        public TestReq(TestReq another) {
          this.properties = another.properties.entrySet().stream()
                  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }
      
        public TestReq() {
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this.properties);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
        public TestReq setProps(String key, Object value) {
          properties.put(key, value);
          return this;
        }
      
      }
      
      public class AccountServiceTest extends SpringTest {
      
        private  final String signUpApi = "/api/auth/signup";
        private  final String changePassApi = "/api/auth/changepass";
        private  final String getEmployeePaymentApi = "/api/empl/payment";
        private final String postPaymentApi = "/api/acct/payments";
        private final String putRoleApi = "/api/admin/user/role";
        private final String adminApi = "/api/admin/user/";
      
      
        static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
                "PasswordForApril", "PasswordForMay", "PasswordForJune",
                "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
                "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};
      
        List<Integer> userIdList = new ArrayList<>();
      
        private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Ivanov")
                .setProps("email", "IvanIvanov@acme.com")
                .setProps("password", "rXoa4CvqpLxW");
        private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
                .setProps("lastname", "Petrov")
                .setProps("email", "PetrPetrov@acme.com")
                .setProps("password", "nWza98hjkLPE");
        private final TestReq johnDoe = new TestReq().setProps("name", "John")
                .setProps("lastname", "Doe")
                .setProps("email", "JohnDoe@acme.com")
                .setProps("password", "oMoa3VvqnLxW");
        private final TestReq maxMus = new TestReq().setProps("name", "Max")
                .setProps("lastname", "Mustermann")
                .setProps("email", "MaxMustermann@acme.com")
                .setProps("password", "ai0y9bMvyF6G");
        private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
                .setProps("lastname", "Nemo")
                .setProps("email", "nautilus@pompilius.com")
                .setProps("password", "wings");
        private final TestReq ivanHoe = new TestReq().setProps("name", "Ivan")
                .setProps("lastname", "Hoe")
                .setProps("email", "IvanHoe@acme.com")
                .setProps("password", "nWza98hjkLPE");
      
        private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
        private final String petrPetrovCorrectUser = petrPetrov.toJson();
        private final String ivanHoeCorrectUser = ivanHoe.toJson();
        private final String jDCorrectUser = johnDoe.toJson();
        private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
        private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
        private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
        private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
        private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
        private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
        private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
        private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
        private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
        private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
        private final String maxMusCorrectUser = maxMus.toJson();
        private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
        private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
        private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
        private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
        private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
        private final String captainNemoWrongUser = captainNemo.toJson();
        private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      
        private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
        private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
        private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();
      
        private String paymentsList = convert(new String[]{
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 654321).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 987).toJson(),
                new TestReq().setProps("employee", "ivanivanov@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 21).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 456789).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 12).toJson()
        });
        private final String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
        private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson()});
        private final String wrongPaymentListDuplicate = convert(new String[]{
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 456789).toJson()
        });
        private final String updatePayment = new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                .setProps("salary", 77777).toJson();
        private final String updatePaymentResponse = new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
        private final String updatePaymentWrongDate = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
        private final String updatePaymentWrongSalary = new TestReq().setProps("employee", "maxmustermann@acme.com")
                .setProps("period", "11-2022").setProps("salary", -1).toJson();
        private final String correctPaymentResponse = convert(new String[]{
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
        });
        private final String correctPaymentResponseIvanov = convert(new String[]{
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 21 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "February-2021").setProps("salary", "9 dollar(s) 87 cent(s)").toJson(),
                new TestReq().setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("period", "January-2021").setProps("salary", "6543 dollar(s) 21 cent(s)").toJson()
        });
        private final String firstResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Petr").setProps("lastname", "Petrov")
                        .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String secondResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
        private final String thirdResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").
                        setProps("roles", new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}).toJson()
        });
        private final String fourthResponseAdminApi = convert(new String[]{
                new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
                new TestReq().setProps("id", 2).setProps("name", "Max").setProps("lastname", "Mustermann")
                        .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 3).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                        .setProps("email", "ivanivanov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
                new TestReq().setProps("id", 4).setProps("name", "Ivan").setProps("lastname", "Hoe")
                        .setProps("email", "ivanhoe@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
        });
      
        public AccountServiceTest() {
          super(AccountServiceApplication.class, "../service_db.mv.db");
        }
      
        private String convert(String[] trs) {
          JsonArray  jsonArray = new JsonArray();
          for (String tr : trs) {
            JsonElement jsonObject = JsonParser.parseString(tr);
            jsonArray.add(jsonObject);
          }
          return jsonArray.toString();
        }
      
      
        CheckResult testApi(String user, String body, int status, String api, String method, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, api, method, message);
      
          return CheckResult.correct();
        }
      
        /**
         * Method for checking response on Post request for signup API
         *
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostSignUpResponse(String body, int status, String[] role) {
      
          HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");
      
          JsonObject rightResponse = getJson(body).getAsJsonObject();
          rightResponse.remove("password");
      
          // Check is it JSON in response or something else
          if (!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
          // Check if password is presence in response
          if (jsonResponse.get("password") != null) {
            return CheckResult.wrong("You must remove password from response\n" +
                    jsonResponse);
          }
      
          if (jsonResponse.get("id") == null) {
            return CheckResult.wrong("Response must contain user ID\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          // Check JSON in response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", rightResponse.get("name").getAsString())
                          .value("lastname", rightResponse.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                          .value("roles", role));
      
          if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
            return CheckResult.wrong("User ID must be unique!\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
      
          userIdList.add(jsonResponse.get("id").getAsInt());
          return CheckResult.correct();
        }
      
        /**
         * Method for check the prohibition of requests specified types
         *
         * @param api testing api (String)
         * @param deniedMethods list of prohibited type requests
         * @param body string representation of body content in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testDeniedMethods(String api, List<String> deniedMethods, String body) {
      
          HttpRequest getReq = get(api);
          HttpRequest postReq = post(api, body);
          HttpRequest putReq = put(api, body);
          HttpRequest deleteReq = delete(api);
      
          Map<String, HttpRequest> methodsMap = new LinkedHashMap<String,  HttpRequest>() {{
            put("get", getReq);
            put("post", postReq);
            put("put", putReq);
            put("delete", deleteReq);
          }};
      
          for (Map.Entry<String, HttpRequest> entry : methodsMap.entrySet()) {
            if (deniedMethods.contains(entry.getKey())) {
              HttpResponse response = entry.getValue().send();
              if (response.getStatusCode() != 405) {
                return CheckResult.wrong("Method " + entry.getKey().toUpperCase() + " is not allowed for " + api + " status code should be " +
                        "405, responded: " + response.getStatusCode());
              }
            }
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
          try {
            reloadSpring();
          } catch (Exception ex) {
            throw new UnexpectedError(ex.getMessage());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking authentication
         *
         * @param user string representation of user information in JSON format (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserRegistration(String user, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);
      
          return CheckResult.correct();
        }
      
        CheckResult testChangePassword(String api, String body, int status, String user) {
          JsonObject userJson = getJson(user).getAsJsonObject();
      
          HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");
      
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("email", userJson.get("email").getAsString().toLowerCase())
                            .value("status", "The password has been updated successfully"));
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing duplicate users
         *
         * @param user string representation of user information in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserDuplicates(String user) {
          HttpResponse response = post(signUpApi, user).send();
          // Check error message field in JSON response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "User exist!")
                          .anyOtherValues());
          return CheckResult.correct();
        }
      
        private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
          JsonObject json = getJson(body).getAsJsonObject();
          HttpResponse response;
          for (int index = 0; index < breachedPass.length; index++) {
            if (json.has("password")) {
              json.remove("password");
              json.addProperty("password", breachedPass[index]);
            } else if (json.has("new_password")) {
              json.remove("new_password");
              json.addProperty("new_password", breachedPass[index]);
            }
            if (login.isEmpty() || password.isEmpty()) {
              response = post(api, json.toString()).send();
            } else {
              response = post(api, json.toString()).basicAuth(login, password).send();
            }
      
            if (response.getStatusCode() != 400) {
              return CheckResult.wrong("POST " + api + " should respond with "
                      + "status code 400 , responded: " + response.getStatusCode() + "\n"
                      + "Response body:\n" + response.getContent() + "\n"
                      + "Request body:\n" + json.toString() + "\n"
                      + message);
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", "The password is in the hacker's database!")
                            .anyOtherValues());
      
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testPostPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "POST", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Added successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutPaymentResponse(String user, String body, int status, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status, postPaymentApi, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Updated successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi , "GET", message);
      
          JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
          JsonArray responseJson = null;
          try {
            responseJson = getJson(response.getContent()).getAsJsonArray();
          } catch (Exception e) {
              return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                      response.getContent().getClass());
          }
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          if (responseJson.isEmpty())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (correctJson.size() != responseJson.size()) {
            return CheckResult.wrong("New data should not be added" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              if (!responseJson.get(i).equals(correctJson.get(i))) {
                return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                        + "in response " + getPrettyJson(responseJson) + "\n"
                        + "must be " + getPrettyJson(correctJson));
              }
            }
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          JsonObject json = getJson(correctResponse).getAsJsonObject();
          JsonObject jsonRequest = getJson(request).getAsJsonObject();
          String param = jsonRequest.get("period").getAsString();
          HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
          if (response.getStatusCode() != status) {
            throw new WrongAnswer("GET" + " " + getEmployeePaymentApi + "?" + param + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            if (!response.getJson().equals(json)) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                      + " wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(response.getJson()) + "\n"
                      + "must be " + getPrettyJson(json));
            }
          }
      
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/empl/payment")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
      
          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("Wrong dataa in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
              for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
                roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
              }
              expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                      .check(isObject()
                              .value("id", isInteger())
                              .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                              .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                              .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                              .value("roles", isArray( roles )));
            }
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                       String answer, String message) {
      
          HttpResponse response = checkResponseStatus(user, "", status.value(),
                  api + param, "DELETE", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("user", param.toLowerCase())
                            .value("status", answer));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api + param)
                            .value("status", status.value())
                            .value("message", answer)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                    String role, String operation, String[] respRoles, String message) {
      
          JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
          JsonObject request = new JsonObject();
          request.addProperty("user", jsonUser.get("email").getAsString());
          request.addProperty("operation", operation);
          request.addProperty("role", role);
      
          HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", jsonUser.get("name").getAsString())
                            .value("lastname", jsonUser.get("lastname").getAsString())
                            .value("email", jsonUser.get("email").getAsString().toLowerCase())
                            .value("roles", isArray(respRoles)));
          }
      
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", respRoles[0])
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {
      
          HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);
      
          // Check JSON in response
          if (response.getStatusCode() != 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", status.getReasonPhrase())
                            .value("path", api)
                            .value("status", status.value())
                            .value("message", "Access Denied!")
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing api response
         *
         * @param user string representation of user information in JSON format (String)
         * @param body request body (String)
         * @param status expected response status (int)
         * @param api testing api (String)
         * @param method method for api (String)
         * @param message test hints for student (String)
         * @return response (HttpResponse)
         */
        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method, String message) {
          HttpRequest request = null;
          switch (method) {
            case "GET":
              request = get(api);
              break;
            case "POST":
              request = post(api, body);
              break;
            case "PUT":
              request = put(api, body);
              break;
            case "DELETE":
              request = delete(api);
              break;
          }
      
          if (user != null) {
            JsonObject userJson = getJson(user).getAsJsonObject();
            String password = userJson.get("password").getAsString();
            String login = userJson.get("email").getAsString().toLowerCase();
            request = request.basicAuth(login, password);
          }
          HttpResponse response = request.send();
      
          if (response.getStatusCode() != status) {
            throw new WrongAnswer(method + " " + api  + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
          return response;
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[] {
      
                // Testing user registration negative tests
                () -> testApi(null, jDEmptyName, 400, signUpApi, "POST", "Empty name field!"), // 1
                () -> testApi(null, jDNoName, 400, signUpApi, "POST", "Name field is absent!"), // 2
                () -> testApi(null, jDEmptyLastName, 400, signUpApi, "POST", "Empty lastname field!"), // 3
                () -> testApi(null, jDNoLastName, 400, signUpApi, "POST", "Lastname field is absent!"), // 4
                () -> testApi(null, jDEmptyEmail, 400, signUpApi, "POST", "Empty email field!"), // 5
                () -> testApi(null, jDNoEmail, 400, signUpApi, "POST", "Email field is absent!"), // 6
                () -> testApi(null, jDEmptyPassword, 400, signUpApi, "POST", "Empty password field!"), // 7
                () -> testApi(null, jDNoPassword, 400, signUpApi, "POST", "Password field is absent!"),// 8
                () -> testApi(null, jDWrongEmail1, 400, signUpApi, "POST", "Wrong email!"), // 9
                () -> testApi(null, jDWrongEmail2, 400, signUpApi, "POST", "Wrong email!"), // 10
                () -> testBreachedPass(signUpApi, "", "", jDCorrectUser,
                        "Sending password from breached list"), // 11
      
                // Testing user registration positive tests
                () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 12
                () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 13
                () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 14
                () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 15
      
      //          // Testing user registration negative tests
                () -> testApi(null, jDCorrectUser, 400, signUpApi, "POST", "User must be unique!"), // 16
                () -> testUserDuplicates(jDCorrectUser), // 17
                () -> testApi(null, jDLower, 400, signUpApi, "POST",
                        "User must be unique (ignorecase)!"), // 18
      
      //
      //          // Test authentication, positive tests
                () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 19
                () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 20
      //
      //          // Test authentication, negative tests
                () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 21
                () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 22
                () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 23
                () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                        "This api only for authenticated user"), // 24
      //
      //          // Testing changing password
                () -> testApi(null, jDDuplicatePass, 401, changePassApi, "POST",
                        "This api only for authenticated user"), // 25
                () -> testApi(jDCorrectUser, jDShortPass, 400, changePassApi, "POST",
                        "The password length must be at least 12 chars!"), // 26
                () -> testApi(jDCorrectUser, jDDuplicatePass, 400, changePassApi, "POST",
                        "The passwords must be different!"), // 27
                () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                        jDDuplicatePass, "Sending password from breached list"), // 28
                () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
                () -> testApi(jDCorrectUser, "", 401, adminApi, "GET",
                        "Password must be changed!"), // 30
                () -> testApi(jDNewPass, "", 200, adminApi, "GET",
                        "Password must be changed!"), // 31
      
                // Testing persistence
                () -> restartApplication(), // 32
                () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                        " Check persistence."), // 33
      
                // Testing admin functions
                // Delete user
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/", "DELETE",
                        "Api must be available only to admin user"), // 34
                () -> testApi(maxMusCorrectUser, "", 403, "/api/admin/user/johndoe@acme.com", "DELETE",
                        "Api must be available only to admin user"), // 35
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        firstResponseAdminApi, "Api must be available to admin user"), // 36
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 37
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 38
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.BAD_REQUEST,
                        jDNewPass, "johndoe@acme.com",
                        "Can't remove ADMINISTRATOR role!", "Trying to delete admin"), // 39
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.NOT_FOUND,
                        jDNewPass, "johndoe@goole.com",
                        "User not found!", "Trying to delete non existing user"), // 40
                () -> testPostSignUpResponse(ivanHoeCorrectUser, 200, new String[] {"ROLE_USER"}), // 41
                () -> testUserRegistration(ivanHoeCorrectUser, 200, "User \"ivanhoe@acme.com\" must be added!"), // 42
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        fourthResponseAdminApi, "User \"ivanhoe@acme.com\" must be added!"), // 43
                () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDNewPass,
                        "ivanhoe@acme.com", "Deleted successfully!", "Trying to delete user \"ivanhoe@acme.com\""), // 44
      
                // Testing persistence
                () -> restartApplication(), // 45
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "User must be deleted!"), // 46
      
      
      
                // Changing roles
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 47
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        thirdResponseAdminApi, "Role must be changed!"), // 48
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"ROLE_USER"}, ""), // 49
                () -> testGetAdminApi("/api/admin/user/", 200, jDNewPass,
                        secondResponseAdminApi, "Role must be changed!"), // 50
                () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDNewPass,
                        ivanIvanovCorrectUser, "ACCOUNTANT", "GRANT",
                        new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, ""), // 51
      
                // Testing admin functions, negative tests
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        ivanIvanovCorrectUser, "NEW_ROLE", "GRANT",
                        new String[] {"Role not found!"}, "Trying add not existing role!"), // 52
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        ivanIvanovCorrectUser, "ADMINISTRATOR", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add administrative role to business user!"), //53
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "USER", "GRANT",
                        new String[] {"The user cannot combine administrative and business roles!"},
                        "Trying add business role to administrator!"), //54
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        jDNewPass, "ADMINISTRATOR", "REMOVE",
                        new String[] {"Can't remove ADMINISTRATOR role!"}, "Trying remove administrator role!"), //55
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "USER", "REMOVE",
                        new String[] {"The user must have at least one role!"}, "Trying remove single role!"), //56
                () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDNewPass,
                        maxMusCorrectUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"The user does not have a role!"}, "Trying remove not granted role!"), //57
                () -> testPutAdminApi(putRoleApi, HttpStatus.NOT_FOUND, jDNewPass,
                        captainNemoWrongUser, "ACCOUNTANT", "REMOVE",
                        new String[] {"User not found!"}, "Trying remove role from non existing user!"), //58
      
                // Testing role model negative case
                () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"), //59
                () -> testRoleModelNegative("/api/admin/user/", "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"), //60
                () -> testRoleModelNegative("/api/admin/user", "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                        "", "Trying to access administrative endpoint with business user"), //61
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"), //62
                () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                        "", "Trying to access endpoint with wrong role"), //63
                () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                        "", "Trying to access business endpoint with administrative user"), //64
      
                // Testing business logic
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, paymentsList, 200, "Payment list must be added"), //65
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"), //66
                () -> testGetPaymentResponse(ivanIvanovCorrectUser, 200, correctPaymentResponseIvanov,
                        "Wrong status code!"), //67
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListSalary, 400, "Wrong salary in payment list"), //68
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"), //69
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListData, 400, "Wrong data in payment list"), //70
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"), //71
                () -> testPostPaymentResponse(ivanIvanovCorrectUser, wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"), //72
                () -> testGetPaymentResponse(maxMusCorrectUser, 200, correctPaymentResponse,
                        "Wrong status code!"), //73
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongDate, 400,"Wrong date in request body!"), //74
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePaymentWrongSalary, 400, "Wrong salary in request body!"), //75
                () -> testPutPaymentResponse(ivanIvanovCorrectUser, updatePayment, 200, "Salary must be update!"), //76
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 200, updatePayment, updatePaymentResponse,
                        "Salary must be update!"), //77
                () -> testGetPaymentResponseParam(maxMusCorrectUser, 400, updatePaymentWrongDate, updatePaymentResponse,
                        "Wrong date in request!"), //78
        };
      
      }
    learner_created: false
  - name: src/account/api/security/BreachedPasswordList.java
    visible: true
    text: |
      package account.api.security;
      
      import java.util.List;
      
      public class BreachedPasswordList {
          private List<String> breachedPasswords;
      
          public List<String> getBreachedPasswords() {
              return breachedPasswords;
          }
      }
    learner_created: true
  - name: src/account/util/ValidMonthYear.java
    visible: true
    text: |-
      package account.util;
      
      import jakarta.validation.Constraint;
      import jakarta.validation.Payload;
      
      import java.lang.annotation.ElementType;
      import java.lang.annotation.Retention;
      import java.lang.annotation.RetentionPolicy;
      import java.lang.annotation.Target;
      
      @Target({ElementType.FIELD})
      @Retention(RetentionPolicy.RUNTIME)
      @Constraint(validatedBy = MonthYearValidator.class)
      public @interface ValidMonthYear {
          String message() default "Invalid month-year format (MM-yyyy)";
          Class<?>[] groups() default {};
          Class<? extends Payload>[] payload() default {};
      }
    learner_created: true
  - name: src/account/api/security/SecurityConfig.java
    visible: true
    text: |
      package account.api.security;
      
      import account.domain.UserAccount;
      import account.domain.repositories.UserAccountRepository;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.authentication.AuthenticationManager;
      import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
      import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.core.context.SecurityContext;
      import org.springframework.security.core.context.SecurityContextHolder;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
      
      import java.util.Optional;
      
      @Configuration
      @EnableWebSecurity
      @EnableMethodSecurity(
              securedEnabled = true,
              jsr250Enabled = true)
      public class SecurityConfig {
          private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
          private final UserAccountRepository userAccountRepository;
          private final CustomBCryptPasswordEncoder encoder;
      
      
          public SecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint, UserAccountRepository userAccountRepository, CustomBCryptPasswordEncoder encoder) {
              this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
              this.userAccountRepository = userAccountRepository;
              this.encoder = encoder;
          }
      
          @Bean
          public UserDetailsService userDetailsService() {
              return username -> {
                  Optional<UserAccount> user = userAccountRepository.findByEmailEqualsIgnoreCase(username);
                  if (user.isEmpty()) {
                      throw new UsernameNotFoundException(username);
                  }
                  CustomUserDetails customUserDetails = new CustomUserDetails(user.get().getEmail(), user.get().getPassword(), user.get().getSalt());
                  SecurityContext context = SecurityContextHolder.getContext();
                  Authentication authentication = new UsernamePasswordAuthenticationToken(customUserDetails, customUserDetails.getPassword());
                  context.setAuthentication(authentication);
      
                  return customUserDetails;
              };
          }
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              AuthenticationManagerBuilder authenticationManagerBuilder = http
                      .getSharedObject(AuthenticationManagerBuilder.class);
      
              authenticationManagerBuilder
                      .userDetailsService(userDetailsService())
                      .passwordEncoder(encoder);
      
              AuthenticationManager authenticationManager = authenticationManagerBuilder.build();
      
              http
                      .httpBasic(Customizer.withDefaults())
                      //.exceptionHandling(ex -> ex.authenticationEntryPoint(restAuthenticationEntryPoint)) // Handle auth errors
                      .csrf(AbstractHttpConfigurer::disable) // For Postman
                      .headers(headers -> headers.frameOptions().disable()) // For the H2 console
                      .authorizeHttpRequests(auth -> auth  // manage access
                                      .requestMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                                      .requestMatchers(HttpMethod.POST, "/actuator/shutdown").permitAll()
                                      .requestMatchers(HttpMethod.POST, "/api/acct/payments").permitAll()
                                      .requestMatchers(HttpMethod.PUT, "/api/acct/payments").permitAll()
                                      .requestMatchers(AntPathRequestMatcher.antMatcher("/h2-console/**")).permitAll()
                                      .anyRequest().authenticated()
                              // other matchers
                      )
                      .sessionManagement(sessions -> sessions
                              .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                      )
                      .authenticationManager(authenticationManager)
                      .securityContext();
      
              return http.build();
          }
      
      }
    learner_created: true
  - name: src/account/exception/PasswordBreachedException.java
    visible: true
    text: |-
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
      public class PasswordBreachedException extends BaseException {
          private final LocalDateTime timestamp;
      
          public PasswordBreachedException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/api/security/CustomBCryptPasswordEncoder.java
    visible: true
    text: |
      package account.api.security;
      
      import org.springframework.security.core.context.SecurityContextHolder;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.stereotype.Component;
      
      import java.util.Objects;
      
      @Component
      public class CustomBCryptPasswordEncoder extends BCryptPasswordEncoder {
      
          public CustomBCryptPasswordEncoder() {
              super(14);
          }
      
          @Override
          public String encode(CharSequence rawPassword) {
              return super.encode(rawPassword);
          }
      
          @Override
          public boolean matches(CharSequence rawPassword, String encodedPassword) {
              if(Objects.nonNull(SecurityContextHolder.getContext()) && Objects.nonNull(SecurityContextHolder.getContext().getAuthentication())){
                  return super.matches(rawPassword + ((CustomUserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getSalt(), encodedPassword);
              }
              return false;
          }
      }
    learner_created: true
  - name: src/account/domain/Employee.java
    visible: true
    text: |-
      package account.domain;
      
      import account.util.DateConverter;
      import jakarta.persistence.Column;
      import jakarta.persistence.Convert;
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import jakarta.persistence.JoinColumn;
      import jakarta.persistence.ManyToOne;
      import jakarta.persistence.SequenceGenerator;
      import jakarta.persistence.Table;
      import jakarta.persistence.UniqueConstraint;
      
      import java.util.Date;
      
      @Entity
      @Table(name = "employee", uniqueConstraints = { @UniqueConstraint(columnNames = { "period", "user_account_id" }) })
      public class Employee {
          @Id
          @Column(name = "id", nullable = false)
          @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_seq")
          @SequenceGenerator(name = "user_seq", sequenceName = "USER_DETAILS_SEQ", allocationSize = 1)
          private Long id;
          @ManyToOne
          @JoinColumn(name="user_account_id", nullable=false)
          private UserAccount userAccount;
          @Column
          @Convert(converter = DateConverter.class)
          private Date period;
          @Column
          private Long salaryInCent;
      
          public Long getId() {
              return id;
          }
      
          public UserAccount getUserAccount() {
              return userAccount;
          }
      
          public void setUserAccount(UserAccount userAccount) {
              this.userAccount = userAccount;
          }
      
          public Date getPeriod() {
              return period;
          }
      
          public void setPeriod(Date period) {
              this.period = period;
          }
      
          public Long getSalaryInCent() {
              return salaryInCent;
          }
      
          public void setSalaryInCent(Long salaryInCent) {
              this.salaryInCent = salaryInCent;
          }
      }
    learner_created: true
  - name: src/account/api/employee/EmployeeService.java
    visible: true
    text: |
      package account.api.employee;
      
      import account.api.employee.dto.EmployeeSalaryUiDto;
      import account.api.employee.dto.EmployeeUiDto;
      import account.domain.Employee;
      import account.domain.UserAccount;
      import account.domain.repositories.EmployeeRepository;
      import account.domain.repositories.UserAccountRepository;
      import account.exception.InvalidPeriodException;
      import account.exception.UserDoesNotExistsException;
      import org.springframework.stereotype.Service;
      
      import java.text.ParseException;
      import java.text.SimpleDateFormat;
      import java.util.ArrayList;
      import java.util.Date;
      import java.util.List;
      import java.util.Locale;
      import java.util.Objects;
      
      @Service
      
      public class EmployeeService {
          private final UserAccountRepository userAccountRepository;
          private final EmployeeRepository employeeRepository;
      
          public EmployeeService(UserAccountRepository userAccountRepository, EmployeeRepository employeeRepository) {
              this.userAccountRepository = userAccountRepository;
              this.employeeRepository = employeeRepository;
          }
      
          public void saveEmployeePayrolls(List<EmployeeUiDto> employeeUiDtoList){
              SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
      
              List<Employee> employeeList = new ArrayList<>();
              employeeUiDtoList.forEach(employeeUiDto -> {
                  UserAccount userAccount = userAccountRepository.findByEmailEqualsIgnoreCase(employeeUiDto.getEmployee())
                          .orElseThrow(UserDoesNotExistsException::new);
                  Employee employee = new Employee();
                  employee.setUserAccount(userAccount);
                  try {
                      employee.setPeriod(sdf.parse(employeeUiDto.getPeriod()));
                  } catch (ParseException e) {
                      throw new InvalidPeriodException();
                  }
                  employee.setSalaryInCent(employeeUiDto.getSalaryInCent());
                  employeeList.add(employee);
              });
      
              employeeRepository.saveAll(employeeList);
          }
      
          public void updateEmployeePayroll(EmployeeUiDto employeeUiDto){
              SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
              Date period;
              try {
                  period = sdf.parse(employeeUiDto.getPeriod());
              } catch (ParseException e) {
                  throw new IllegalStateException("Cannot parse the date!");
              }
      
              Employee employee = employeeRepository.findByUserAccountEmailEqualsIgnoreCaseAndPeriod(employeeUiDto.getEmployee(), period).get();
              if (Objects.nonNull(employee)){
                  employee.setSalaryInCent(employeeUiDto.getSalaryInCent());
              } else {
                  UserAccount userAccount = userAccountRepository.findByEmailEqualsIgnoreCase(employeeUiDto.getEmployee())
                          .orElseThrow(UserDoesNotExistsException::new);
                  employee = new Employee();
                  employee.setUserAccount(userAccount);
                  employee.setPeriod(period);
                  employee.setSalaryInCent(employeeUiDto.getSalaryInCent());
              }
      
              employeeRepository.save(employee);
          }
      
          public EmployeeSalaryUiDto findEmployeePayroll(String period, String email) {
              try {
                  SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
                  sdf.setLenient(false);
                  Date date = sdf.parse(period);
                  Employee employee = employeeRepository.findByPeriodAndUserAccountEmailEqualsIgnoreCaseOrderByPeriodDesc(date, email).orElseThrow();
                  EmployeeSalaryUiDto employeeSalaryUiDto = new EmployeeSalaryUiDto();
                  employeeSalaryUiDto.setName(employee.getUserAccount().getName());
                  employeeSalaryUiDto.setLastname(employee.getUserAccount().getLastname());
                  employeeSalaryUiDto.setPeriod(new SimpleDateFormat("MMMM-yyyy", Locale.ENGLISH).format(employee.getPeriod()));
                  employeeSalaryUiDto.setSalary(employee.getSalaryInCent());
                  return employeeSalaryUiDto;
              } catch (ParseException e) {
                  throw new InvalidPeriodException();
              }
      
          }
      
          public List<EmployeeSalaryUiDto> findEmployeeAllPayrolls(String email) {
      
              List<Employee> employeeList = employeeRepository.findByUserAccountEmailEqualsIgnoreCaseOrderByPeriodDesc(email);
              List<EmployeeSalaryUiDto> employeeSalaryUiDtoList = new ArrayList<>();
      
              employeeList.forEach(employee -> {
                  EmployeeSalaryUiDto employeeSalaryUiDto = new EmployeeSalaryUiDto();
                  employeeSalaryUiDto.setName(employee.getUserAccount().getName());
                  employeeSalaryUiDto.setLastname(employee.getUserAccount().getLastname());
                  employeeSalaryUiDto.setPeriod(new SimpleDateFormat("MMMM-yyyy", Locale.ENGLISH).format(employee.getPeriod()));
                  employeeSalaryUiDto.setSalary(employee.getSalaryInCent());
                  employeeSalaryUiDtoList.add(employeeSalaryUiDto);
              });
      
              return employeeSalaryUiDtoList;
      
          }
      }
    learner_created: true
  - name: src/account/exception/NewPasswordMustBeDifferentException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
      public class NewPasswordMustBeDifferentException extends BaseException {
          private final LocalDateTime timestamp;
      
          public NewPasswordMustBeDifferentException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/util/DateConverter.java
    visible: true
    text: |
      package account.util;
      
      import account.exception.InvalidPeriodException;
      import jakarta.persistence.AttributeConverter;
      import jakarta.persistence.Converter;
      
      import java.text.DateFormat;
      import java.text.ParseException;
      import java.text.SimpleDateFormat;
      import java.util.Date;
      
      @Converter
      public class DateConverter implements AttributeConverter<Date, String> {
      
          private final DateFormat dateFormat = new SimpleDateFormat("MM-yyyy");
      
          @Override
          public String convertToDatabaseColumn(Date date) {
              if (date == null) {
                  return null;
              }
              return dateFormat.format(date);
          }
      
          @Override
          public Date convertToEntityAttribute(String dateString) {
              if (dateString == null) {
                  return null;
              }
              try {
                  return dateFormat.parse(dateString);
              } catch (ParseException e) {
                  throw new InvalidPeriodException();
              }
          }
      }
    learner_created: true
  - name: src/account/api/employee/dto/SuccessUiDto.java
    visible: true
    text: |
      package account.api.employee.dto;
      
      public class SuccessUiDto {
          private String status;
      
          public SuccessUiDto(String status) {
              this.status = status;
          }
      
          public String getStatus() {
              return status;
          }
      }
    learner_created: true
  - name: src/account/api/employee/EmployeeUiController.java
    visible: true
    text: |
      package account.api.employee;
      
      import account.api.security.CustomUserDetails;
      import jakarta.validation.constraints.Pattern;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.validation.annotation.Validated;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RequestParam;
      import org.springframework.web.bind.annotation.RestController;
      
      import java.util.Objects;
      
      @RestController
      @RequestMapping(value="/api/empl")
      @Validated
      public class EmployeeUiController {
          private final EmployeeService employeeService;
      
      
          public EmployeeUiController(EmployeeService employeeService) {
              this.employeeService = employeeService;
          }
      
          @GetMapping(value="/payment")
          public ResponseEntity<?> getEmployeePayroll(Authentication authentication, @RequestParam(required = false, name = "period") @Pattern(regexp = "\\d{2}-\\d{4}", message = "Period must be in MM-yyyy format") String period){
              if (Objects.nonNull(period)){
                  return ResponseEntity.ok(employeeService.findEmployeePayroll(period, ((CustomUserDetails) authentication.getPrincipal()).getUsername()));
              } else {
                  return ResponseEntity.ok(employeeService.findEmployeeAllPayrolls(((CustomUserDetails) authentication.getPrincipal()).getUsername()));
              }
          }
      }
    learner_created: true
  - name: src/account/api/security/dto/SignupUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotEmpty;
      import org.hibernate.validator.constraints.Length;
      
      public class SignupUiDto {
          @NotEmpty
          private String name;
          @NotEmpty
          private String lastname;
          @NotEmpty
          @Email(regexp = ".+@acme\\.com$")
          private String email;
          @NotEmpty
          @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
          @Length(min = 12, message = "Password length must be 12 chars minimum!")
          private String password;
      
          public SignupUiDto() {
          }
      
          public String getName() {
              return name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getPassword() {
              return password;
          }
      }
    learner_created: true
  - name: src/resources/other/breached-passwords.json
    visible: true
    text: |-
      {
        "breachedPasswords": [
          "PasswordForJanuary",
          "PasswordForFebruary",
          "PasswordForMarch",
          "PasswordForApril",
          "PasswordForMay",
          "PasswordForJune",
          "PasswordForJuly",
          "PasswordForAugust",
          "PasswordForSeptember",
          "PasswordForOctober",
          "PasswordForNovember",
          "PasswordForDecember"
        ]
      }
    learner_created: true
  - name: src/account/api/security/dto/UserUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonInclude;
      import jakarta.validation.constraints.NotNull;
      
      @JsonInclude(JsonInclude.Include.NON_NULL)
      public class UserUiDto {
          private final Long id;
          @NotNull
          private final String name;
          @NotNull
          private final String lastname;
          @NotNull
          private final String email;
      
          public UserUiDto(Long id, String name, String lastname, String email) {
              this.id = id;
              this.name = name;
              this.lastname = lastname;
              this.email = email;
          }
      
          public Long getId() {
              return id;
          }
      
          public String getName() {
              return name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public String getEmail() {
              return email;
          }
      }
    learner_created: true
  - name: src/account/api/security/AuthUiController.java
    visible: true
    text: |
      package account.api.security;
      
      import account.api.security.dto.NewPasswordUiDto;
      import account.api.security.dto.PasswordUpdatedUiDto;
      import account.api.security.dto.SignupUiDto;
      import account.api.security.dto.UserUiDto;
      import account.domain.UserAccount;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.validation.annotation.Validated;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      @RestController
      @RequestMapping(value="/api/auth")
      public class AuthUiController {
          private final UserAccountService userAccountService;
      
          public AuthUiController(UserAccountService userAccountService) {
              this.userAccountService = userAccountService;
          }
      
          @PostMapping(value="/signup")
          public ResponseEntity<UserUiDto> signup(@Validated @RequestBody SignupUiDto signupUiDto){
              return ResponseEntity.ok(userAccountService.addUser(signupUiDto));
          }
      
          @GetMapping(value="/signin")
          public ResponseEntity<UserUiDto> signin(Authentication authentication){
              UserAccount userAccount = userAccountService.findByUsername(((CustomUserDetails) authentication.getPrincipal()).getUsername());
              return ResponseEntity.ok(new UserUiDto(userAccount.getId(), userAccount.getName(), userAccount.getLastname(), userAccount.getEmail()));
          }
      
          @PostMapping(value="/changepass")
          public ResponseEntity<PasswordUpdatedUiDto> changePassword(@Validated @RequestBody NewPasswordUiDto newPasswordUiDto, Authentication authentication){
              return ResponseEntity.ok(userAccountService.updatePassword(newPasswordUiDto, authentication));
          }
      }
    learner_created: true
  - name: src/account/domain/repositories/EmployeeRepository.java
    visible: true
    text: |
      package account.domain.repositories;
      
      import account.domain.Employee;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.Date;
      import java.util.List;
      import java.util.Optional;
      
      public interface EmployeeRepository extends CrudRepository<Employee, Long> {
          Optional<Employee> findByPeriodAndUserAccountEmailEqualsIgnoreCaseOrderByPeriodDesc(Date period, String email);
          List<Employee> findByUserAccountEmailEqualsIgnoreCaseOrderByPeriodDesc(String email);
          Optional<Employee> findByUserAccountEmailEqualsIgnoreCaseAndPeriod(String email, Date period);
      }
    learner_created: true
  - name: src/account/api/security/dto/NewPasswordUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import org.hibernate.validator.constraints.Length;
      
      public class NewPasswordUiDto {
          @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
          @Length(min = 12, message = "Password length must be 12 chars minimum!")
          private String new_password;
      
          public String getNew_password() {
              return new_password;
          }
      }
    learner_created: true
  - name: src/account/domain/UserAccount.java
    visible: true
    text: |
      package account.domain;
      
      import jakarta.persistence.Column;
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import jakarta.persistence.OneToMany;
      import jakarta.persistence.SequenceGenerator;
      import jakarta.persistence.Table;
      
      import java.util.List;
      
      @Entity
      @Table(name = "user_account")
      public class UserAccount {
          @Id
          @Column(name = "id", nullable = false)
          @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_seq")
          @SequenceGenerator(name = "user_seq", sequenceName = "USER_DETAILS_SEQ", allocationSize = 1)
          private Long id;
          @Column
          private String name;
          @Column
          private String lastname;
          @Column(name = "email_username", unique = true)
          private String email;
          @Column
          private String password;
          @Column
          private String salt;
          @OneToMany(mappedBy = "userAccount")
          private List<Employee> employees;
      
      
          public Long getId() {
              return id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public void setLastname(String lastname) {
              this.lastname = lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      
          public String getSalt() {
              return salt;
          }
      
          public void setSalt(String salt) {
              this.salt = salt;
          }
      
          public List<Employee> getEmployees() {
              return employees;
          }
      
          public void setEmployees(List<Employee> employees) {
              this.employees = employees;
          }
      
          public void addEmployee(Employee employee) {
              this.employees.add(employee);
          }
      }
    learner_created: true
  - name: src/account/api/security/UserAccountService.java
    visible: true
    text: |
      package account.api.security;
      
      import account.AccountServiceApplication;
      import account.api.security.dto.NewPasswordUiDto;
      import account.api.security.dto.PasswordUpdatedUiDto;
      import account.api.security.dto.SignupUiDto;
      import account.api.security.dto.UserUiDto;
      import account.domain.UserAccount;
      import account.domain.repositories.UserAccountRepository;
      import account.exception.NewPasswordMustBeDifferentException;
      import account.exception.PasswordBreachedException;
      import account.exception.UserExistsException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.crypto.bcrypt.BCrypt;
      import org.springframework.stereotype.Service;
      
      import java.io.IOException;
      import java.io.InputStream;
      import java.util.Objects;
      
      @Service
      public class UserAccountService {
          private final UserAccountRepository userAccountRepository;
          private final CustomBCryptPasswordEncoder encoder;
      
      
          public UserAccountService(UserAccountRepository userAccountRepository, CustomBCryptPasswordEncoder encoder) {
              this.userAccountRepository = userAccountRepository;
              this.encoder = encoder;
          }
      
          public UserUiDto addUser(SignupUiDto signupUiDto){
      
              String salt = BCrypt.gensalt();
              String hashedPassword = hashPassword(signupUiDto.getPassword(), salt);
      
              UserAccount userAccount = userAccountRepository.findByEmailEqualsIgnoreCase(signupUiDto.getEmail()).orElse(null);
              if(Objects.nonNull(userAccount)){
                  throw new UserExistsException();
              }
      
              BreachedPasswordList breachedPasswordList = getBreachedPasswordList();
              if(breachedPasswordList.getBreachedPasswords().contains(signupUiDto.getPassword())){
                  throw new PasswordBreachedException();
              }
      
              userAccount = new UserAccount();
              userAccount.setEmail(signupUiDto.getEmail().toLowerCase());
              userAccount.setName(signupUiDto.getName());
              userAccount.setLastname(signupUiDto.getLastname());
              userAccount.setPassword(hashedPassword);
              userAccount.setSalt(salt);
              UserAccount savedUserAccount = userAccountRepository.save(userAccount);
      
              return new UserUiDto(savedUserAccount.getId(), savedUserAccount.getName(),
                      savedUserAccount.getLastname(), savedUserAccount.getEmail());
          }
      
          public PasswordUpdatedUiDto updatePassword(NewPasswordUiDto newPasswordUiDto, Authentication authentication){
              UserAccount userAccount = userAccountRepository.findByEmailEqualsIgnoreCase(((CustomUserDetails) authentication.getPrincipal()).getUsername()).orElseThrow(() -> new IllegalStateException("User not found!"));
              if(checkNewPasswordIsTheSame(newPasswordUiDto.getNew_password(), userAccount.getPassword())){
                  throw new NewPasswordMustBeDifferentException();
              }
      
              BreachedPasswordList breachedPasswordList = getBreachedPasswordList();
              if(breachedPasswordList.getBreachedPasswords().contains(newPasswordUiDto.getNew_password())){
                  throw new PasswordBreachedException();
              }
      
              String salt = BCrypt.gensalt();
              String hashedPassword = hashPassword(newPasswordUiDto.getNew_password(), salt);
      
              userAccount.setPassword(hashedPassword);
              userAccount.setSalt(salt);
              UserAccount savedUserAccount = userAccountRepository.save(userAccount);
      
              return new PasswordUpdatedUiDto(savedUserAccount.getEmail());
          }
      
          private static BreachedPasswordList getBreachedPasswordList() {
              String jsonFilePath = "other/breached-passwords.json";
      
              BreachedPasswordList dataObject;
              try {
                  InputStream inputStream = AccountServiceApplication.class.getClassLoader().getResourceAsStream(jsonFilePath);
                  if (inputStream != null) {
                      ObjectMapper objectMapper = new ObjectMapper();
                      dataObject = objectMapper.readValue(inputStream, BreachedPasswordList.class);
                  } else {
                      throw new IllegalStateException("BreachedPasswordList cannot be found!, inputStream is null");
                  }
              } catch (IOException e) {
                  throw new IllegalStateException("BreachedPasswordList cannot be found!, e:", e);
              }
              return dataObject;
          }
      
          private String hashPassword(String password, String salt) {
              return encoder.encode(password + salt);
          }
      
          private boolean checkNewPasswordIsTheSame(String password, String hashedPassword) {
              return encoder.matches(password, hashedPassword);
          }
      
          public UserAccount findByUsername(String username) {
              return userAccountRepository.findByEmailEqualsIgnoreCase(username).orElseThrow(() -> new IllegalStateException("User not found!"));
          }
      }
    learner_created: true
  - name: src/account/domain/repositories/UserAccountRepository.java
    visible: true
    text: |
      package account.domain.repositories;
      
      import account.domain.UserAccount;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.Optional;
      
      public interface UserAccountRepository extends CrudRepository<UserAccount, Long> {
      
          @Override
          Optional<UserAccount> findById(Long id);
      
          Optional<UserAccount> findByEmailEqualsIgnoreCase(String email);
      }
    learner_created: true
  - name: src/account/exception/UserExistsException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
      public class UserExistsException extends BaseException {
          private final LocalDateTime timestamp;
      
          public UserExistsException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/exception/RestError.java
    visible: true
    text: |
      package account.exception;
      
      
      import java.time.LocalDateTime;
      
      public class RestError {
          private final LocalDateTime timestamp;
          private final int status;
          private final String error;
          private final String message;
          private final String path;
      
          public RestError(LocalDateTime timestamp, int status, String error, String message, String path) {
              this.timestamp = timestamp;
              this.status = status;
              this.error = error;
              this.message = message;
              this.path = path;
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
          public int getStatus() {
              return status;
          }
      
          public String getError() {
              return error;
          }
      
          public String getMessage() {
              return message;
          }
      
          public String getPath() {
              return path;
          }
      }
    learner_created: true
  - name: src/account/exception/CustomResponseEntityExceptionHandler.java
    visible: true
    text: |-
      package account.exception;
      
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.validation.ConstraintViolationException;
      import org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.validation.FieldError;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.bind.annotation.ExceptionHandler;
      import org.springframework.web.bind.annotation.ResponseStatus;
      import org.springframework.web.bind.annotation.RestControllerAdvice;
      
      import java.time.LocalDateTime;
      
      @RestControllerAdvice
      public class CustomResponseEntityExceptionHandler {
      
          @ExceptionHandler({ UserExistsException.class, NewPasswordMustBeDifferentException.class,
                  PasswordBreachedException.class, UserDoesNotExistsException.class, InvalidPeriodException.class})
          public ResponseEntity<RestError> handleUserExistException(BaseException ex, HttpServletRequest request) {
              ResponseStatus responseStatusAnnotation = ex.getClass().getAnnotation(ResponseStatus.class);
              RestError re = new RestError(ex.getTimestamp(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), responseStatusAnnotation.reason(), request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      
          @ExceptionHandler({MethodArgumentNotValidException.class})
          public ResponseEntity<RestError> handleRuntimeException(MethodArgumentNotValidException ex, HttpServletRequest request) {
              String err = ex.getBindingResult().getFieldErrors()
                      .stream().map(FieldError::getDefaultMessage).toList().get(0);
              RestError re = new RestError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), err, request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      
          @ExceptionHandler({JdbcSQLIntegrityConstraintViolationException.class})
          public ResponseEntity<RestError> handleJdbcSQLIntegrityConstraintViolationException(JdbcSQLIntegrityConstraintViolationException ex, HttpServletRequest request) {
              RestError re = new RestError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), ex.getMessage(), request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      
          @ExceptionHandler({ConstraintViolationException.class})
          public ResponseEntity<RestError> handleJdbcSQLIntegrityConstraintViolationException(ConstraintViolationException ex, HttpServletRequest request) {
              RestError re = new RestError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), ex.getMessage(), request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      }
    learner_created: true
  - name: src/account/util/MonthYearValidator.java
    visible: true
    text: |
      package account.util;
      
      import jakarta.validation.ConstraintValidator;
      import jakarta.validation.ConstraintValidatorContext;
      
      import java.text.ParseException;
      import java.text.SimpleDateFormat;
      
      public class MonthYearValidator implements ConstraintValidator<ValidMonthYear, String> {
      
          @Override
          public void initialize(ValidMonthYear constraintAnnotation) {
          }
      
          @Override
          public boolean isValid(String value, ConstraintValidatorContext context) {
              if (value == null) {
                  return false;
              }
      
              SimpleDateFormat sdf = new SimpleDateFormat("MM-yyyy");
              sdf.setLenient(false); // Disable lenient mode to disallow invalid dates
      
              try {
                  sdf.parse(value);
                  return true; // If parsing succeeds, the date is valid
              } catch (ParseException e) {
                  return false; // Parsing failed, the date is invalid
              }
          }
      }
    learner_created: true
  - name: src/account/api/employee/PaymentUiController.java
    visible: true
    text: |-
      package account.api.employee;
      
      import account.api.employee.dto.EmployeeUiDto;
      import account.api.employee.dto.SuccessUiDto;
      import jakarta.validation.Valid;
      import org.springframework.http.ResponseEntity;
      import org.springframework.validation.annotation.Validated;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.PutMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      import java.util.List;
      
      @RestController
      @Validated
      @RequestMapping(value="/api/acct")
      public class PaymentUiController {
          private final EmployeeService employeeService;
      
          public PaymentUiController(EmployeeService employeeService) {
              this.employeeService = employeeService;
          }
      
          @PostMapping(value="/payments")
          public ResponseEntity<SuccessUiDto> uploadPayrolls(@Valid @RequestBody List<EmployeeUiDto> employeeUiDtoList){
              employeeService.saveEmployeePayrolls(employeeUiDtoList);
              return ResponseEntity.ok(new SuccessUiDto("Added successfully!"));
          }
      
          @PutMapping(value="/payments")
          public ResponseEntity<SuccessUiDto> changeSalaryOfEmployee(@Valid @RequestBody EmployeeUiDto employeeUiDto){
              employeeService.updateEmployeePayroll(employeeUiDto);
              return ResponseEntity.ok(new SuccessUiDto("Updated successfully!"));
          }
      }
    learner_created: true
  - name: src/account/api/employee/dto/EmployeeUiDto.java
    visible: true
    text: |
      package account.api.employee.dto;
      
      import account.util.ValidMonthYear;
      import com.fasterxml.jackson.annotation.JsonFormat;
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.validation.constraints.NotEmpty;
      import jakarta.validation.constraints.Positive;
      import org.springframework.validation.annotation.Validated;
      @Validated
      public class EmployeeUiDto {
      
          @NotEmpty(message = "Employee email cannot be empty!")
          private String employee;
          @JsonFormat(pattern="MM-yyyy")
          @ValidMonthYear
          private String period;
          @Positive(message = "Salary cannot be negative!")
          @JsonProperty(value = "salary")
          private Long salaryInCent;
      
          public String getEmployee() {
              return employee;
          }
      
          public String getPeriod() {
              return period;
          }
      
          public Long getSalaryInCent() {
              return salaryInCent;
          }
      }
    learner_created: true
  - name: src/account/api/security/dto/PasswordUpdatedUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      public class PasswordUpdatedUiDto {
          private final String email;
          private final String status;
      
          public PasswordUpdatedUiDto(String email) {
              this.email = email;
              this.status = "The password has been updated successfully";
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getStatus() {
              return status;
          }
      }
    learner_created: true
  - name: src/account/api/security/CustomUserDetails.java
    visible: true
    text: |
      package account.api.security;
      
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      import java.util.Collection;
      
      public class CustomUserDetails implements UserDetails
      {
          private String email;
          private String password;
          private String salt;
      
          public CustomUserDetails(String email, String password, String salt) {
              this.email = email;
              this.password = password;
              this.salt = salt;
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return null;
          }
      
          @Override
          public String getPassword() {
              return password;
          }
      
          @Override
          public String getUsername() {
              return email;
          }
      
          public String getSalt() {
              return salt;
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      }
    learner_created: true
  - name: src/account/exception/UserDoesNotExistsException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User does not exists!")
      public class UserDoesNotExistsException extends BaseException {
          private final LocalDateTime timestamp;
      
          public UserDoesNotExistsException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/api/employee/dto/EmployeeSalaryUiDto.java
    visible: true
    text: |
      package account.api.employee.dto;
      
      public class EmployeeSalaryUiDto {
          private String name;
          private String lastname;
          private String period;
          private String salary;
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public void setLastname(String lastname) {
              this.lastname = lastname;
          }
      
          public String getPeriod() {
              return period;
          }
      
          public void setPeriod(String period) {
              this.period = period;
          }
      
          public String getSalary() {
              return salary;
          }
      
          public void setSalary(Long salaryInCent) {
              Long cents = salaryInCent % 100;
              Long dollars = salaryInCent / 100;
              this.salary = dollars + " dollar(s) " + cents + " cent(s)";
          }
      }
    learner_created: true
  - name: src/account/api/security/RestAuthenticationEntryPoint.java
    visible: true
    text: |
      package account.api.security;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.security.core.AuthenticationException;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      import java.io.IOException;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
          @Override
          public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)
                  throws IOException, ServletException {
      
              response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
          }
      }
    learner_created: true
  - name: src/account/exception/BaseException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class BaseException extends RuntimeException {
          private final LocalDateTime timestamp;
      
          public BaseException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/exception/InvalidPeriodException.java
    visible: true
    text: |-
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Given period is invalid!")
      public class InvalidPeriodException extends BaseException {
          private final LocalDateTime timestamp;
      
          public InvalidPeriodException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          @Override
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/domain/Group.java
    visible: true
    learner_created: true
  - name: src/account/bootstrap/DataLoader.java
    visible: true
    learner_created: true
  - name: src/account/domain/repositories/GroupRepository.java
    visible: true
    learner_created: true
  - name: src/account/api/security/Role.java
    visible: true
    learner_created: true
  - name: src/account/api/admin/AdminUiController.java
    visible: true
    learner_created: true
  - name: src/account/api/security/CustomAccessDeniedHandler.java
    visible: true
    learner_created: true
  - name: src/account/exception/UserNotFoundException.java
    visible: true
    learner_created: true
  - name: src/account/exception/AdminCannotDeleteThemselfOrAdminRoleCannotBeRemovedException.java
    visible: true
    learner_created: true
  - name: src/account/api/admin/dto/UserRoleUiDto.java
    visible: true
    learner_created: true
  - name: src/account/exception/RoleNotFoundException.java
    visible: true
    learner_created: true
  - name: src/account/exception/UserDoesNotHaveRoleException.java
    visible: true
    learner_created: true
  - name: src/account/exception/UserHasOnlyOneRoleException.java
    visible: true
    learner_created: true
  - name: src/account/exception/AdministrativeAndBusinessRolesCannotBeCombinedException.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/16605#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 10 May 2024 10:45:16 UTC"
record: 5
