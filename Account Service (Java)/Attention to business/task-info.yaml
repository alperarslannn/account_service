type: edu
files:
  - name: src/account/AccountServiceApplication.java
    visible: true
    text: |
      package account;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AccountServiceApplication {
      
          public static void main(String[] args) {
              SpringApplication.run(AccountServiceApplication.class, args);
          }
      
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.h2database:h2'
          implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/AccountServiceTest.java
    visible: false
    text: |-
      import account.AccountServiceApplication;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import com.fasterxml.jackson.core.JsonProcessingException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import com.google.gson.JsonParser;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.ArrayList;
      import java.util.LinkedHashMap;
      import java.util.List;
      import java.util.Map;
      import java.util.stream.Collectors;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestReq {
      
        private Map<String, Object> properties = new LinkedHashMap<>();
      
        // Deep copy
        public TestReq(TestReq another) {
          this.properties = another.properties.entrySet().stream()
                  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
        }
      
        public TestReq() {
        }
      
        public String toJson() {
          ObjectMapper mapper = new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          try {
            return mapper.writeValueAsString(this.properties);
          } catch (JsonProcessingException e) {
            System.out.println(e.getMessage());
            return null;
          }
        }
      
        public TestReq setProps(String key, Object value) {
          properties.put(key, value);
          return this;
        }
      
      }
      
      public class AccountServiceTest extends SpringTest {
      
        private  final String signUpApi = "/api/auth/signup";
        private  final String changePassApi = "/api/auth/changepass";
        private  final String getEmployeePaymentApi = "/api/empl/payment";
        private final String postPaymentApi = "api/acct/payments";
      
      
        static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
                "PasswordForApril", "PasswordForMay", "PasswordForJune",
                "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
                "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};
      
        List<Integer> userIdList = new ArrayList<>();
      
        private final TestReq johnDoe = new TestReq().setProps("name", "John")
                .setProps("lastname", "Doe")
                .setProps("email", "JohnDoe@acme.com")
                .setProps("password", "oMoa3VvqnLxW");
        private final TestReq maxMus = new TestReq().setProps("name", "Max")
                .setProps("lastname", "Mustermann")
                .setProps("email", "MaxMustermann@acme.com")
                .setProps("password", "ai0y9bMvyF6G");
        private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
                .setProps("lastname", "Nemo")
                .setProps("email", "nautilus@pompilius.com")
                .setProps("password", "wings");
      
        private final String jDCorrectUser = johnDoe.toJson();
        private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
        private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
        private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
        private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
        private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
        private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
        private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
        private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
        private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
        private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
        private final String maxMusCorrectUser = maxMus.toJson();
        private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
        private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
        private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
        private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
        private final String captainNemoWrongUser = captainNemo.toJson();
        private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      
        private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
        private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
        private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();
      
        private String paymentsList = convert(new String[]{
                new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 456789).toJson(),
                new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 12).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 54321).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                        .setProps("salary", 987654).toJson(),
                new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                        .setProps("salary", 120).toJson()
        });
        private String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "13-2021").setProps("salary", 123456).toJson()});
      
      
        private  String wrongPaymentListSalary = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "13-2021").setProps("salary", -1).toJson()});
      
        private String wrongPaymentListDuplicate = convert(new String[]{
                new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 123456).toJson(),
                new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                        .setProps("salary", 456789).toJson()
        });
        private String updatePayment = new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                .setProps("salary", 77777).toJson();
        private String updatePayment1 = new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                .setProps("salary", 88777).toJson();
        private String updatePaymentResponse = new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
        private String updatePaymentResponse1 = new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                .setProps("period", "January-2021").setProps("salary", "887 dollar(s) 77 cent(s)").toJson();
        private String updatePaymentWrongDate = new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
        private String updatePaymentWrongSalary = new TestReq().setProps("employee", "johndoe@acme.com")
                .setProps("period", "13-2021").setProps("salary", -1).toJson();
        private String correctPaymentResponse = convert(new String[]{
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
        });
        private String correctPaymentResponse1 = convert(new String[]{
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson()
        });
        private String correctPaymentResponse2 = convert(new String[]{
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
                new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                        .setProps("period", "January-2021").setProps("salary", "887 dollar(s) 77 cent(s)").toJson()
        });
      
        public AccountServiceTest() {
          super(AccountServiceApplication.class, "../service_db.mv.db");
        }
      
        private String convert(String[] trs) {
          JsonArray  jsonArray = new JsonArray();
          for (String tr : trs) {
            JsonElement jsonObject = JsonParser.parseString(tr);
            jsonArray.add(jsonObject);
          }
          return jsonArray.toString();
        }
      
        /**
         * Method for checking status code of response Post request for API
         *
         * @param api testing api (String)
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostApi(String api, String body, int status, String message) {
          HttpResponse response = post(api, body).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          return CheckResult.correct();
        }
      
        CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
          HttpResponse response = post(api, body).basicAuth(login, pass).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking status code of response Get request for API
         *
         * @param api testing api (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testGetApi(String api, int status, String message) {
          HttpResponse response = get(api).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("GET " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking status code of response Get request for API
         *
         * @param api testing api (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @param login login
         * @param password password
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
          HttpResponse response = get(api).basicAuth(login, password).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("GET " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message);
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking response on Post request for signup API
         *
         * @param body string representation of body content in JSON format (String)
         * @param status required http status for response (int)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        CheckResult testPostSignUpResponse(String body, int status) {
          HttpResponse response = post(signUpApi, body).send();
          testPostApi(signUpApi, body, status, "API must be available");
      
          JsonObject rightResponse = getJson(body).getAsJsonObject();
          rightResponse.remove("password");
      
          // Check is it JSON in response or something else
          if (!response.getJson().isJsonObject()) {
            return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
          // Check if password is presence in response
          if (jsonResponse.get("password") != null) {
            return CheckResult.wrong("You must remove password from response\n" +
                    jsonResponse);
          }
      
          if (jsonResponse.get("id") == null) {
            return CheckResult.wrong("Response must contain user ID\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
          // Check JSON in response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", rightResponse.get("name").getAsString())
                          .value("lastname", rightResponse.get("lastname").getAsString())
                          .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString()))));
      
          if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
            return CheckResult.wrong("User ID must be unique!\n" +
                    "Received response:\n" +
                    jsonResponse);
          }
      
          userIdList.add(jsonResponse.get("id").getAsInt());
          return CheckResult.correct();
        }
      
      
        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
          try {
            reloadSpring();
          } catch (Exception ex) {
            throw new UnexpectedError(ex.getMessage());
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for checking authentication
         *
         * @param user string representation of user information in JSON format (String)
         * @param status required http status for response (int)
         * @param message hint about reason of error (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserRegistration(String user, int status, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Authentication with " + login + " / " + password);
          }
          return CheckResult.correct();
        }
      
        CheckResult testChangePassword(String api, String body, int status, String user) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String pass = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          HttpResponse response = post(api, body).basicAuth(login, pass).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
          // Check JSON in response
          if (status == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("email", userJson.get("email").getAsString().toLowerCase())
                            .value("status", "The password has been updated successfully"));
          }
          return CheckResult.correct();
        }
      
        /**
         * Method for testing duplicate users
         *
         * @param user string representation of user information in JSON format (String)
         * @return instance of CheckResult class containing result of checks (CheckResult)
         */
        private CheckResult testUserDuplicates(String user) {
          HttpResponse response = post(signUpApi, user).send();
          // Check error message field in JSON response
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "User exist!")
                          .anyOtherValues());
          return CheckResult.correct();
        }
      
        private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
          JsonObject json = getJson(body).getAsJsonObject();
          HttpResponse response;
          for (int index = 0; index < breachedPass.length; index++) {
            if (json.has("password")) {
              json.remove("password");
              json.addProperty("password", breachedPass[index]);
            } else if (json.has("new_password")) {
              json.remove("new_password");
              json.addProperty("new_password", breachedPass[index]);
            }
            if (login.isEmpty() || password.isEmpty()) {
              response = post(api, json.toString()).send();
            } else {
              response = post(api, json.toString()).basicAuth(login, password).send();
            }
      
            if (response.getStatusCode() != 400) {
              return CheckResult.wrong("POST " + api + " should respond with "
                      + "status code 400 , responded: " + response.getStatusCode() + "\n"
                      + "Response body:\n" + response.getContent() + "\n"
                      + "Request body:\n" + json.toString() + "\n"
                      + message);
            }
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", 400)
                            .value("error", "Bad Request")
                            .value("message", "The password is in the hacker's database!")
                            .anyOtherValues());
      
          }
          return CheckResult.correct();
        }
      
      
        CheckResult testPostPaymentResponse(String body, int status, String message) {
          HttpResponse response = post(postPaymentApi, body).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + postPaymentApi + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Added successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testPutPaymentResponse(String body, int status, String message) {
          HttpResponse response = put(postPaymentApi, body).send();
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("PUT " + postPaymentApi + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + body);
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("status", "Updated successfully!")
                            .anyOtherValues());
          }
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/acct/payments")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();
      
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
      
          }
      
          JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
          JsonArray responseJson = null;
          try {
            responseJson = getJson(response.getContent()).getAsJsonArray();
          } catch (Exception e) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("POST " + getEmployeePaymentApi + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
      
          if (responseJson.isEmpty())  {
            return CheckResult.wrong("Payments was not added " + "\n"
                    + "endpoint " + getEmployeePaymentApi + "\n"
                    + "responded with " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          if (correctJson.size() != responseJson.size()) {
            return CheckResult.wrong("New data should not be added" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            for (int i = 0; i < responseJson.size(); i++) {
              if (!responseJson.get(i).equals(correctJson.get(i))) {
                return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                        + "in response " + getPrettyJson(responseJson) + "\n"
                        + "must be " + getPrettyJson(correctJson));
              }
            }
          }
      //    if (response.getStatusCode() == 400) {
      //      expect(response.getContent()).asJson().check(
      //              isObject()
      //                      .value("error", "Bad Request")
      //                      .value("path", "/api/acct/payments")
      //                      .value("status", 400)
      //                      .anyOtherValues());
      //    }
          return CheckResult.correct();
        }
      
        CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          JsonObject json = getJson(correctResponse).getAsJsonObject();
          JsonObject jsonRequest = getJson(request).getAsJsonObject();
          String param = jsonRequest.get("period").getAsString();
          HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();
      
          if (response.getStatusCode() != status) {
            return CheckResult.wrong("GET " + getEmployeePaymentApi + "?period=" + param + " should respond with "
                    + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                    + message + "\n"
                    + "Response body:\n" + response.getContent() + "\n");
          }
      
          // Check JSON in response
          if (response.getStatusCode() == 200) {
            if (!response.getJson().equals(json)) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                      + " wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(response.getJson()) + "\n"
                      + "must be " + getPrettyJson(json));
            }
          }
      
          if (response.getStatusCode() == 400) {
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", "Bad Request")
                            .value("path", "/api/empl/payment")
                            .value("status", 400)
                            .anyOtherValues());
          }
          return CheckResult.correct();
        }
      
        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[] {
                // Test wrong POST request for signup api
                () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"), // 1
                () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"), // 2
                () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"), // 3
                () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"), // 4
                () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"), // 5
                () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"), // 6
                () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"), // 7
                () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"), // 8
                () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"), // 9
                () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"), // 10
                // Test user registration on signup api
                () -> testBreachedPass(signUpApi, "", "",
                        jDCorrectUser, "Sending password from breached list"), // 11
                () -> testPostSignUpResponse(jDCorrectUser, 200), // 12
                () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"), // 13
                () -> testUserDuplicates(jDCorrectUser), // 14
                () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"), // 15
                () -> testPostSignUpResponse(maxMusLower, 200), // 16
                () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"), // 17
                () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"), // 18
                // Test authentication, positive tests
                () -> testUserRegistration(jDLower, 200, "User must login!"), // 19
                () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"), // 20
                () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 21
                () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 22
                // Test authentication, negative tests
                () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"), // 23
                () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"), // 24
                () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 25
                () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 26
                () -> testGetApi(getEmployeePaymentApi, 401, "This api only for authenticated user"), // 27
      
                // Test changing password
                () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"), // 28
                () -> testPostApiWithAuth(changePassApi, jDShortPass, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"), // 29
                () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                        "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"), // 30
                () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                        jDDuplicatePass, "Sending password from breached list"), // 31
                () -> testChangePassword(changePassApi,jDPass, 200, jDCorrectUser), // 32
                () -> testGetApiAuth(getEmployeePaymentApi, 401,"JohnDoe@acme.com",
                        "oMoa3VvqnLxW", "Password must be changed!"), // 33
                () -> testGetApiAuth(getEmployeePaymentApi, 200,"JohnDoe@acme.com",
                        "aNob5VvqzRtb", "Password must be changed!"), // 34
      
                // Test persistence
                () -> restartApplication(), // 35
                () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                        " Check persistence."), // 36
                // Test business logic
                () -> testPostPaymentResponse(paymentsList, 200, "Payment list must be added"), // 37
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                        "Wrong status code!"), // 38
                () -> testPostPaymentResponse(wrongPaymentListSalary, 400, "Wrong salary in payment list"), // 39
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                        "Wrong status code!"), // 40
                () -> testPostPaymentResponse(wrongPaymentListData, 400, "Wrong data in payment list"), // 41
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                        "Wrong status code!"), // 42
                () -> testPostPaymentResponse(wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"), // 43
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                        "Wrong status code!"), // 44
                () -> testPutPaymentResponse(updatePaymentWrongDate, 400,"Wrong date in request body!"), // 45
                () -> testPutPaymentResponse(updatePaymentWrongSalary, 400, "Wrong salary in request body!"), // 46
                () -> testPutPaymentResponse(updatePayment, 200, "Salary must be update!"), // 47
                () -> testGetPaymentResponseParam(jDNewPass, 200, updatePayment, updatePaymentResponse,
                        "Salary must be update!"), // 48
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse1,
                        "Changes should only apply to one period!"), // 49
                () -> testPutPaymentResponse(updatePayment1, 200, "Salary must be update!"), // 50
                () -> testGetPaymentResponseParam(jDNewPass, 200, updatePayment1, updatePaymentResponse1,
                        "Salary must be update!"), // 51
                () -> testGetPaymentResponseParam(jDNewPass, 400, updatePaymentWrongDate, updatePaymentResponse,
                        "Wrong date in request!"), // 52
                () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse2,
                        "Changes should only apply to one period!"), // 53
        };
      }
    learner_created: false
  - name: src/account/api/security/BreachedPasswordList.java
    visible: true
    text: |
      package account.api.security;
      
      import java.util.List;
      
      public class BreachedPasswordList {
          private List<String> breachedPasswords;
      
          public List<String> getBreachedPasswords() {
              return breachedPasswords;
          }
      }
    learner_created: true
  - name: src/account/api/security/UserAccountService.java
    visible: true
    text: |
      package account.api.security;
      
      import account.AccountServiceApplication;
      import account.api.security.dto.NewPasswordUiDto;
      import account.api.security.dto.PasswordUpdatedUiDto;
      import account.api.security.dto.SignupUiDto;
      import account.api.security.dto.UserUiDto;
      import account.domain.UserAccount;
      import account.domain.repositories.UserRepository;
      import account.exception.NewPasswordMustBeDifferentException;
      import account.exception.PasswordBreachedException;
      import account.exception.UserExistsException;
      import com.fasterxml.jackson.databind.ObjectMapper;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.crypto.bcrypt.BCrypt;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.stereotype.Service;
      
      import java.io.IOException;
      import java.io.InputStream;
      import java.util.Objects;
      
      @Service
      public class UserAccountService {
          private final UserRepository userRepository;
          private final CustomBCryptPasswordEncoder encoder;
      
      
          public UserAccountService(UserRepository userRepository, CustomBCryptPasswordEncoder encoder) {
              this.userRepository = userRepository;
              this.encoder = encoder;
          }
      
          public UserUiDto addUser(SignupUiDto signupUiDto){
              /*Verify that passwords are stored in a form that is resistant to offline
              attacks. Passwords must be salted and hashed using an approved one-way key
              derivation or a password hashing function;
      
              If you use bcrypt, the work factor must be as large as the verification server
              performance will allow. Usually, at least 13
              */
      
              String salt = BCrypt.gensalt();
              String hashedPassword = hashPassword(signupUiDto.getPassword(), salt);
      
              UserAccount userAccount = userRepository.findByEmailEqualsIgnoreCase(signupUiDto.getEmail()).orElse(null);
              if(Objects.nonNull(userAccount)){
                  throw new UserExistsException();
              }
      
              BreachedPasswordList breachedPasswordList = getBreachedPasswordList();
              if(breachedPasswordList.getBreachedPasswords().contains(signupUiDto.getPassword())){
                  throw new PasswordBreachedException();
              }
      
              userAccount = new UserAccount();
              userAccount.setEmail(signupUiDto.getEmail().toLowerCase());
              userAccount.setName(signupUiDto.getName());
              userAccount.setLastname(signupUiDto.getLastname());
              userAccount.setPassword(hashedPassword);
              userAccount.setSalt(salt);
              UserAccount savedUserAccount = userRepository.save(userAccount);
      
              return new UserUiDto(savedUserAccount.getId(), savedUserAccount.getName(),
                      savedUserAccount.getLastname(), savedUserAccount.getEmail());
          }
      
          public PasswordUpdatedUiDto updatePassword(NewPasswordUiDto newPasswordUiDto, Authentication authentication){
              UserAccount userAccount = userRepository.findByEmailEqualsIgnoreCase(((CustomUserDetails) authentication.getPrincipal()).getUsername()).get();
              //todo fix yanlış çalışmıyo
              if(verifyPassword(newPasswordUiDto+userAccount.getSalt(), userAccount.getPassword())){
                  throw new NewPasswordMustBeDifferentException();
              }
      
              BreachedPasswordList breachedPasswordList = getBreachedPasswordList();
              if(breachedPasswordList.getBreachedPasswords().contains(newPasswordUiDto.getNew_password())){
                  throw new PasswordBreachedException();
              }
      
              String salt = BCrypt.gensalt();
              String hashedPassword = hashPassword(newPasswordUiDto.getNew_password(), salt);
      
              userAccount.setPassword(hashedPassword);
              userAccount.setSalt(salt);
              UserAccount savedUserAccount = userRepository.save(userAccount);
      
              return new PasswordUpdatedUiDto(savedUserAccount.getEmail());
          }
      
          private static BreachedPasswordList getBreachedPasswordList() {
              String jsonFilePath = "other/breached-passwords.json";
      
              BreachedPasswordList dataObject;
              try {
                  InputStream inputStream = AccountServiceApplication.class.getClassLoader().getResourceAsStream(jsonFilePath);
                  if (inputStream != null) {
                      ObjectMapper objectMapper = new ObjectMapper();
                      dataObject = objectMapper.readValue(inputStream, BreachedPasswordList.class);
                  } else {
                      throw new IllegalStateException("BreachedPasswordList cannot be found!, inputStream is null");
                  }
              } catch (IOException e) {
                  throw new IllegalStateException("BreachedPasswordList cannot be found!, e:", e);
              }
              return dataObject;
          }
      
          private String hashPassword(String password, String salt) {
              encoder.encode(password + salt);
              return encoder.encode(password + salt);
          }
      
          private boolean verifyPassword(String password, String hashedPassword) {
              return encoder.matches(password, hashedPassword);
          }
      }
    learner_created: true
  - name: src/account/exception/UserExistsException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
      public class UserExistsException extends BaseException {
          private final LocalDateTime timestamp;
      
          public UserExistsException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/exception/RestError.java
    visible: true
    text: |
      package account.exception;
      
      
      import java.time.LocalDateTime;
      
      public class RestError {
          private final LocalDateTime timestamp;
          private final int status;
          private final String error;
          private final String message;
          private final String path;
      
          public RestError(LocalDateTime timestamp, int status, String error, String message, String path) {
              this.timestamp = timestamp;
              this.status = status;
              this.error = error;
              this.message = message;
              this.path = path;
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
          public int getStatus() {
              return status;
          }
      
          public String getError() {
              return error;
          }
      
          public String getMessage() {
              return message;
          }
      
          public String getPath() {
              return path;
          }
      }
    learner_created: true
  - name: src/account/api/security/SecurityConfig.java
    visible: true
    text: |
      package account.api.security;
      
      import account.domain.UserAccount;
      import account.domain.repositories.UserRepository;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.authentication.AuthenticationManager;
      import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
      import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.core.context.SecurityContext;
      import org.springframework.security.core.context.SecurityContextHolder;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
      
      import java.util.Optional;
      
      @Configuration
      @EnableWebSecurity
      @EnableMethodSecurity(
              securedEnabled = true,
              jsr250Enabled = true)
      public class SecurityConfig {
          private final RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
          private final UserRepository userRepository;
          private final CustomBCryptPasswordEncoder encoder;
      
      
          public SecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint, UserRepository userRepository, CustomBCryptPasswordEncoder encoder) {
              this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
              this.userRepository = userRepository;
              this.encoder = encoder;
          }
      
          @Bean
          public UserDetailsService userDetailsService() {
              return username -> {
                  Optional<UserAccount> user = userRepository.findByEmailEqualsIgnoreCase(username);
                  if (user.isEmpty()) {
                      throw new UsernameNotFoundException(username);
                  }
                  CustomUserDetails customUserDetails = new CustomUserDetails(user.get().getEmail(), user.get().getPassword(), user.get().getSalt());
                  SecurityContext context = SecurityContextHolder.getContext();
                  Authentication authentication = new UsernamePasswordAuthenticationToken(customUserDetails, customUserDetails.getPassword());
                  context.setAuthentication(authentication);
      
                  return customUserDetails;
              };
          }
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              AuthenticationManagerBuilder authenticationManagerBuilder = http
                      .getSharedObject(AuthenticationManagerBuilder.class);
      
              authenticationManagerBuilder
                      .userDetailsService(userDetailsService())
                      .passwordEncoder(encoder);
      
              AuthenticationManager authenticationManager = authenticationManagerBuilder.build();
      
              http
                      .httpBasic(Customizer.withDefaults())
                      //.exceptionHandling(ex -> ex.authenticationEntryPoint(restAuthenticationEntryPoint)) // Handle auth errors
                      .csrf(AbstractHttpConfigurer::disable) // For Postman
                      .headers(headers -> headers.frameOptions().disable()) // For the H2 console
                      .authorizeHttpRequests(auth -> auth  // manage access
                                      .requestMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                                      .requestMatchers(HttpMethod.POST, "/actuator/shutdown").permitAll()
                                      .requestMatchers(AntPathRequestMatcher.antMatcher("/h2-console/**")).permitAll()
                                      .anyRequest().authenticated()
                              // other matchers
                      )
                      .sessionManagement(sessions -> sessions
                              .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                      )
                      .authenticationManager(authenticationManager)
                      .securityContext();
      
              return http.build();
          }
      
      }
    learner_created: true
  - name: src/account/exception/PasswordBreachedException.java
    visible: true
    text: |-
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
      public class PasswordBreachedException extends BaseException {
          private final LocalDateTime timestamp;
      
          public PasswordBreachedException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/exception/CustomResponseEntityExceptionHandler.java
    visible: true
    text: |-
      package account.exception;
      
      import jakarta.servlet.http.HttpServletRequest;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.validation.FieldError;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.bind.annotation.ExceptionHandler;
      import org.springframework.web.bind.annotation.ResponseStatus;
      import org.springframework.web.bind.annotation.RestControllerAdvice;
      
      import java.time.LocalDateTime;
      
      @RestControllerAdvice
      public class CustomResponseEntityExceptionHandler {
      
          @ExceptionHandler({ UserExistsException.class, NewPasswordMustBeDifferentException.class, PasswordBreachedException.class})
          public ResponseEntity<RestError> handleUserExistExceptionException(BaseException ex, HttpServletRequest request) {
              ResponseStatus responseStatusAnnotation = ex.getClass().getAnnotation(ResponseStatus.class);
              RestError re = new RestError(ex.getTimestamp(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), responseStatusAnnotation.reason(), request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      
          @ExceptionHandler({MethodArgumentNotValidException.class})
          public ResponseEntity<RestError> handleRuntimeExceptionException(MethodArgumentNotValidException ex, HttpServletRequest request) {
              String err = ex.getBindingResult().getFieldErrors()
                      .stream().map(FieldError::getDefaultMessage).toList().get(0);
              RestError re = new RestError(LocalDateTime.now(), HttpStatus.BAD_REQUEST.value(),
                      HttpStatus.BAD_REQUEST.getReasonPhrase(), err, request.getServletPath());
              return new ResponseEntity<>(re, HttpStatus.BAD_REQUEST);
          }
      }
    learner_created: true
  - name: src/account/api/security/CustomBCryptPasswordEncoder.java
    visible: true
    text: |
      package account.api.security;
      
      import account.domain.repositories.UserRepository;
      import org.springframework.security.core.context.SecurityContextHolder;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.stereotype.Component;
      
      @Component
      public class CustomBCryptPasswordEncoder extends BCryptPasswordEncoder {
      
          public CustomBCryptPasswordEncoder() {
              super(14);
          }
      
          @Override
          public String encode(CharSequence rawPassword) {
              return super.encode(rawPassword);
          }
      
          @Override
          public boolean matches(CharSequence rawPassword, String encodedPassword) {
              return super.matches(rawPassword + ((CustomUserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getSalt(), encodedPassword);
          }
      }
    learner_created: true
  - name: src/account/api/employee/EmployeeUiController.java
    visible: true
    text: |
      package account.api.employee;
      
      import account.api.security.CustomUserDetails;
      import account.api.security.dto.UserUiDto;
      import account.domain.UserAccount;
      import account.domain.repositories.UserRepository;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      @RestController
      @RequestMapping(value="/api/empl")
      public class PaymentUiController {
          private final UserRepository userRepository;
      
          public PaymentUiController(UserRepository userRepository) {
              this.userRepository = userRepository;
          }
      
          @GetMapping(value="/payment")
          public ResponseEntity<UserUiDto> signup(Authentication authentication){
              UserAccount userAccount = userRepository.findByEmailEqualsIgnoreCase(((CustomUserDetails) authentication.getPrincipal()).getUsername()).get();
              return ResponseEntity.ok(new UserUiDto(userAccount.getId(), userAccount.getName(), userAccount.getLastname(), userAccount.getEmail()));
          }
      }
    learner_created: true
  - name: src/account/exception/NewPasswordMustBeDifferentException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
      public class NewPasswordMustBeDifferentException extends BaseException {
          private final LocalDateTime timestamp;
      
          public NewPasswordMustBeDifferentException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/api/security/dto/PasswordUpdatedUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      public class PasswordUpdatedUiDto {
          private final String email;
          private final String status;
      
          public PasswordUpdatedUiDto(String email) {
              this.email = email;
              this.status = "The password has been updated successfully";
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getStatus() {
              return status;
          }
      }
    learner_created: true
  - name: src/account/api/security/CustomUserDetails.java
    visible: true
    text: |
      package account.api.security;
      
      import account.domain.UserAccount;
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      import java.util.Collection;
      
      public class CustomUserDetails implements UserDetails
      {
          private String email;
          private String password;
          private String salt;
      
          public CustomUserDetails(String email, String password, String salt) {
              this.email = email;
              this.password = password;
              this.salt = salt;
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return null;
          }
      
          @Override
          public String getPassword() {
              return password;
          }
      
          @Override
          public String getUsername() {
              return email;
          }
      
          public String getSalt() {
              return salt;
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      }
    learner_created: true
  - name: src/account/api/security/dto/SignupUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import jakarta.validation.constraints.Email;
      import jakarta.validation.constraints.NotEmpty;
      import org.hibernate.validator.constraints.Length;
      
      public class SignupUiDto {
          @NotEmpty
          private String name;
          @NotEmpty
          private String lastname;
          @NotEmpty
          @Email(regexp = ".+@acme\\.com$")
          private String email;
          @NotEmpty
          @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
          @Length(min = 12, message = "Password length must be 12 chars minimum!")
          private String password;
      
          public SignupUiDto() {
          }
      
          public String getName() {
              return name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getPassword() {
              return password;
          }
      }
    learner_created: true
  - name: src/resources/other/breached-passwords.json
    visible: true
    text: |-
      {
        "breachedPasswords": [
          "PasswordForJanuary",
          "PasswordForFebruary",
          "PasswordForMarch",
          "PasswordForApril",
          "PasswordForMay",
          "PasswordForJune",
          "PasswordForJuly",
          "PasswordForAugust",
          "PasswordForSeptember",
          "PasswordForOctober",
          "PasswordForNovember",
          "PasswordForDecember"
        ]
      }
    learner_created: true
  - name: src/account/api/security/RestAuthenticationEntryPoint.java
    visible: true
    text: |
      package account.api.security;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.security.core.AuthenticationException;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      import java.io.IOException;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
          @Override
          public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)
                  throws IOException, ServletException {
      
              response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
          }
      }
    learner_created: true
  - name: src/account/api/security/dto/UserUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonInclude;
      import jakarta.validation.constraints.NotNull;
      
      @JsonInclude(JsonInclude.Include.NON_NULL)
      public class UserUiDto {
          private final long id;
          @NotNull
          private final String name;
          @NotNull
          private final String lastname;
          @NotNull
          private final String email;
      
          public UserUiDto(long id, String name, String lastname, String email) {
              this.id = id;
              this.name = name;
              this.lastname = lastname;
              this.email = email;
          }
      
          public long getId() {
              return id;
          }
      
          public String getName() {
              return name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public String getEmail() {
              return email;
          }
      }
    learner_created: true
  - name: src/account/api/security/AuthUiController.java
    visible: true
    text: |
      package account.api.security;
      
      import account.api.security.dto.NewPasswordUiDto;
      import account.api.security.dto.PasswordUpdatedUiDto;
      import account.api.security.dto.SignupUiDto;
      import account.api.security.dto.UserUiDto;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.validation.annotation.Validated;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;
      
      @RestController
      @RequestMapping(value="/api/auth")
      public class AuthUiController {
          private final UserAccountService userAccountService;
      
          public AuthUiController(UserAccountService userAccountService) {
              this.userAccountService = userAccountService;
          }
      
          @PostMapping(value="/signup")
          public ResponseEntity<UserUiDto> signup(@Validated @RequestBody SignupUiDto signupUiDto){
              return ResponseEntity.ok(userAccountService.addUser(signupUiDto));
          }
      
          @PostMapping(value="/changepass")
          public ResponseEntity<PasswordUpdatedUiDto> changePassword(@Validated @RequestBody NewPasswordUiDto newPasswordUiDto, Authentication authentication){
              return ResponseEntity.ok(userAccountService.updatePassword(newPasswordUiDto, authentication));
          }
      }
    learner_created: true
  - name: src/account/exception/BaseException.java
    visible: true
    text: |
      package account.exception;
      
      import org.springframework.http.HttpStatus;
      import org.springframework.web.bind.annotation.ResponseStatus;
      
      import java.time.LocalDateTime;
      
      
      @ResponseStatus(code = HttpStatus.BAD_REQUEST)
      public class BaseException extends RuntimeException {
          private final LocalDateTime timestamp;
      
          public BaseException() {
              super();
              timestamp = LocalDateTime.now();
          }
      
          public LocalDateTime getTimestamp() {
              return timestamp;
          }
      
      }
    learner_created: true
  - name: src/account/api/security/dto/NewPasswordUiDto.java
    visible: true
    text: |
      package account.api.security.dto;
      
      import com.fasterxml.jackson.annotation.JsonProperty;
      import org.hibernate.validator.constraints.Length;
      
      public class NewPasswordUiDto {
          @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
          @Length(min = 12, message = "Password length must be 12 chars minimum!")
          private String new_password;
      
          public String getNew_password() {
              return new_password;
          }
      }
    learner_created: true
  - name: src/account/domain/UserAccount.java
    visible: true
    text: |
      package account.domain;
      
      import jakarta.persistence.Column;
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import jakarta.persistence.SequenceGenerator;
      import jakarta.persistence.Table;
      
      @Entity
      @Table(name = "userCustom")
      public class UserAccount {
          @Id
          @Column(name = "id", nullable = false)
          @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_seq")
          @SequenceGenerator(name = "user_seq", sequenceName = "USER_DETAILS_SEQ", allocationSize = 1)
          private Long id;
          @Column
          private String name;
          @Column
          private String lastname;
          @Column(unique = true)
          private String email;
          @Column
          private String password;
      
          @Column
          private String salt;
      
          public Long getId() {
              return id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getLastname() {
              return lastname;
          }
      
          public void setLastname(String lastname) {
              this.lastname = lastname;
          }
      
          public String getEmail() {
              return email;
          }
      
          public void setEmail(String email) {
              this.email = email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      
          public String getSalt() {
              return salt;
          }
      
          public void setSalt(String salt) {
              this.salt = salt;
          }
      
          @Override
          public String toString() {
              return "UserAccount{" +
                      "id=" + id +
                      ", name='" + name + '\'' +
                      ", lastname='" + lastname + '\'' +
                      ", email='" + email + '\'' +
                      ", password='" + password + '\'' +
                      '}';
          }
      
      }
    learner_created: true
  - name: src/account/domain/repositories/UserAccountRepository.java
    visible: true
    text: |
      package account.domain.repositories;
      
      import account.domain.UserAccount;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.Optional;
      
      public interface UserAccountRepository extends CrudRepository<UserAccount, Long> {
      
          @Override
          Optional<UserAccount> findById(Long id);
      
          Optional<UserAccount> findByEmailEqualsIgnoreCase(String email);
      }
    learner_created: true
  - name: src/account/api/employee/PaymentUiController.java
    visible: true
    learner_created: true
  - name: src/account/domain/Employee.java
    visible: true
    learner_created: true
  - name: src/account/api/employee/dto/EmployeeUiDto.java
    visible: true
    learner_created: true
  - name: src/account/domain/repositories/EmployeeRepository.java
    visible: true
    learner_created: true
  - name: src/account/api/employee/EmployeeService.java
    visible: true
    learner_created: true
  - name: src/account/api/employee/dto/SuccessUiDto.java
    visible: true
    learner_created: true
  - name: src/account/exception/UserDoesNotExistsException.java
    visible: true
    learner_created: true
  - name: src/account/api/employee/dto/EmployeeSalaryUiDto.java
    visible: true
    learner_created: true
  - name: src/account/util/DateConverter.java
    visible: true
    learner_created: true
  - name: src/account/util/MonthYearValidator.java
    visible: true
    learner_created: true
  - name: src/account/util/ValidMonthYear.java
    visible: true
    learner_created: true
  - name: src/account/exception/InvalidPeriodException.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/16604#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 09 May 2024 12:29:34 UTC"
record: 4
